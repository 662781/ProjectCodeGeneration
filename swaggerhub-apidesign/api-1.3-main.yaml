openapi: 3.0.0
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/662781/BankAPI/1.3
info:
  description: This is a Bank API
  version: '1.3'
  title: Bank API
  contact:
    email: 662781@student.inholland.nl
  license:
    name: Apache 2.0
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
tags:
  - name: Employee
    description: Operations available to employees
  - name: Customer
    description: Operations available to customers
security:
  - bearerAuth: []
paths:
  /users:
    post:
      tags:
        - Customer
      summary: Register User Data
      operationId: addUser
      requestBody:
        description: New user object
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserDTO"
      responses:
        201:
          description: User created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserDTO"
        400:
          description: Invalid user object
  /users/getByPhone/{phone}:
    parameters:
      - in: path
        name: phone
        required: true
        description: Phone Number input
        schema:
          type: string
    get:
      tags:
        - Employee
      summary: Search a user list on phone number
      operationId: getUserByPhone
      responses:
        200:
          description: User found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserDTO"
        404:
          description: User not found
        418:
          description: I'm a tea pot
  /users/getByUsername/{username}:
    parameters:
      - in: path
        name: username
        required: true
        description: Username input
        schema:
          type: string
    get:
      tags:
        - Employee
      summary: Search a user list on username
      operationId: getUserByUsername
      responses:
        200:
          description: User found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserDTO"
        404:
          description: User not found
        418:
          description: I'm a tea pot
  /accounts:
    get:
      tags:
        - Employee
      summary: Search account list with pagination
      operationId: getAccounts
      description: |
        By passing in the appropriate options, you can search for
        accounts in the DB
      parameters:
        - in: query
          name: skip
          description: Number of records to skip for pagination
          schema:
            type: integer
            format: int32
            minimum: 0
        - in: query
          name: limit
          description: Maximum number of records to return
          schema:
            type: integer
            format: int32
            minimum: 1
            maximum: 200000
      responses:
        200:
          description: Search results matching criteria
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AccountDTO"
        400:
          description: bad input parameter
    post:
      tags:
        - Employee
      summary: Add a new bank account
      operationId: addAccount
      requestBody:
        description: New account object
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AccountDTO"
      responses:
        201:
          description: Account created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccountDTO"
        400:
          description: Invalid account object
  /accounts/{iban}:
    parameters:
      - in: path
        name: iban
        required: true
        description: IBAN input
        schema:
          type: string
    get:
      tags:
        - Employee
        - Customer
      summary: Search an account list on IBAN
      operationId: getByIBAN
      responses:
        200:
          description: Account found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccountDTO"
        404:
          description: Account not found
        418:
          description: I'm a tea pot
    put:
      tags:
        - Employee
      summary: Updates an account
      operationId: updateAccount
      description: |
        By sending this request, an employee can update the account information with the given IBAN
      requestBody:
        description: Updated account object
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AccountDTO"
      responses:
        200:
          description: Account found and updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccountDTO"
        404:
          description: Account IBAN not found
  /transactions:
    post:
      tags:
        - Employee
        - Customer
      summary: Create a new transaction
      operationId: createTransaction
      requestBody:
        description: New transaction object
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TransactionDTO"
      responses:
        201:
          description: Transaction created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TransactionDTO"
        400:
          description: Invalid transaction
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    UserDTO:
      type: object
      required:
        - username
        - firstname
        - lastname
        - dob
        - address
        - email
        - phone
      properties:
        id:
          type: string
          format: uuid
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
        userType:
          $ref: "#/components/schemas/UserType"
        username:
          type: string
          example: FluffyUnicorn77
        firstname:
          type: string
          example: John
        lastname:
          type: string
          example: Doe
        dob:
          type: string
          format: date
          example: "1956-04-24"
        address:
          type: string
          example: Wolkenweg 15 8324AD Haarlem
        email:
          type: string
          example: johndoe@example.com
        phone:
          type: string
          example: +31 0634534565
        registeredOn:
          type: string
          format: date-time
          example: "2022-04-24 12:57:00"
        dayLimit:
          type: number
          format: double
          example: 5000.00
        transLimit:
          type: number
          format: double
          example: 2000.00
    UserType:
      type: string
      enum:
        - employee
        - customer
    AccountDTO:
      type: object
      required:
        - accountType
        - balance
        - absLimit
        - active
      properties:
        iban:
          type: string
          example: NLxxINHO0xxxxxxxxx
        accountType:
          $ref: "#/components/schemas/AccountType"
        ownerId:
          type: string
          format: uuid
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
        balance:
          type: number
          format: double
          example: 3.21
        absLimit:
          type: number
          format: double
          example: -100
        active:
          type: boolean
    AccountType:
      type: string
      enum:
        - savings
        - current
    TransactionDTO:
      type: object
      required:
        - from
        - to
        - amount
      properties:
        id:
          type: string
          format: uuid
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
        timestamp:
          type: string
          format: date-time
          example: "2022-04-24 12:57:00"
        from:
          type: string
          example: NLxxINHO0xxxxxxxxx
        to:
          type: string
          example: NLxxINHO0xxxxxxxxx
        amount:
          type: number
          format: double
          example: 3.20
          description: Amount of Euros
        userPerforming:
          type: string
          format: uuid
          example: d290f1ee-6c54-4b01-90e6-d701748f0851